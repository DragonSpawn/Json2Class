using System;
using System.Collections.Generic;
using System.IO;
using SimpleJSON;
using Newtonsoft.Json;

/////////////////////////////////////////////////////////////////////////////////////
/* This file is generated by Json2Class (https://github.com/DragonSpawn/Json2Class)*/
/* Modifications to this file will be lost the next time you run the tool.         */
/* Date: 2015-01-07                                                                */
/////////////////////////////////////////////////////////////////////////////////////

namespace Generated
{
    public class Person
    {
        public Person()
        {
            Name = string.Empty;
            Country = string.Empty;
            Family = new List<Person>();
        }

        public string Name {get; set;}
        public int Age {get; set;}
        public string Country {get; set;}
        public List<Person> Family {get; set;}

        public static class SimpleJsonFactory
        {
            public static JSONNode ToJson(Person obj)
            {
                var json = new JSONClass();
                json["name"] = new JSONData(obj.Name);
                json["age"] = new JSONData(obj.Age);
                json["country"] = new JSONData(obj.Country);
                var family = new JSONArray();
                foreach(var item in obj.Family)
                {
                    family.Add(Generated.Person.SimpleJsonFactory.ToJson(item));
                }
                json["family"] = family;

                return json;
            }

            public static Person FromJson(JSONNode json)
            {
                var name = json["name"].Value ?? "";
                var age = json["age"].AsInt;
                var country = json["country"].Value ?? "";
                var family = new List<Person>();
                foreach(JSONNode item in json["family"].AsArray)
                {
                    family.Add(Generated.Person.SimpleJsonFactory.FromJson(item));
                }

                return new Person
                {
                    Name = name,
                    Age = age,
                    Country = country,
                    Family = family,
                };
            }

        }

        public static class NewtonsoftFactory
        {
            public static Person FromJson(string json)
            {
                var reader = new JsonTextReader(new StringReader(json));
                return FromJson(reader);
            }

            public static Person FromJson(JsonTextReader reader)
            {
                var currentProperty = string.Empty;

                var tempName = "";
                var tempCountry = "";
                var tempAge = 0;
                List<Person> tempFamily = null;
                var done = false;

                while (reader.Read() && !done)
                {
                    if (reader.Value != null)
                    {
                        switch (reader.TokenType)
                        {
                            case JsonToken.PropertyName:
                                {
                                    currentProperty = reader.Value.ToString();
                                    break;
                                }

                            case JsonToken.String:
                                {
                                    switch (currentProperty)
                                    {
                                        case "name":
                                            {
                                                tempName = reader.Value.ToString();
                                                break;
                                            }
                                        case "country":
                                            {
                                                tempCountry = reader.Value.ToString();
                                                break;
                                            }
                                    }
                                    break;
                                }

                            case JsonToken.Integer:
                                {
                                    switch (currentProperty)
                                    {
                                        case "age":
                                            {
                                                tempAge = Int32.Parse(reader.Value.ToString());
                                                break;
                                            }
                                    }
                                    break;
                                }
                        }
                    }
                    else
                    {
                        switch (reader.TokenType)
                        {
                            case JsonToken.StartArray:
                                {
                                    break;
                                }

                            case JsonToken.EndArray:
                                {
                                    done = true;
                                    break;
                                }
                            case JsonToken.EndObject:
                                {
                                    done = true;
                                    break;
                                }
                        }
                    }

                }

                return new Person
                {
                    Name = tempName,
                    Country = tempCountry,
                    Age = tempAge,
                    Family = tempFamily
                };
            }
        }
    }
}
