using SimpleJSON;
using System.Collections.Generic;

/////////////////////////////////////////////////////////////////////////////////////
/* This file is generated by Json2Class (https://github.com/DragonSpawn/Json2Class)*/
/* Modifications to this file will be lost the next time you run the tool.         */
/*                                                                                 */
/////////////////////////////////////////////////////////////////////////////////////

namespace Generated
{
    public class Person
    {
        public Person()
        {
            Name = string.Empty;
            Country = string.Empty;
            Gender = 0;
            Family = new List<Person>();
        }

        public string Name {get; set;}
        public long Age {get; set;}
        public string Country {get; set;}
        public bool IsHuman {get; set;}
        public Glossary MyGlossary {get; set;}
        public Gender Gender {get; set;}
        public List<Person> Family {get; set;}

        public static class SimpleJsonFactory
        {
            public static string ToJson(Person obj)
            {
                var jsonObject = ToJsonObject(obj);
                return jsonObject.ToString();
            }

            public static string ToJson(List<Person> arr)
            {
                var array = new JSONArray();
                foreach (var item in arr)
                {
                    array.Add(ToJsonObject(item));
                }
                return array.ToString();
            }

            public static JSONNode ToJsonObject(Person obj)
            {
                var jsonObject = new JSONClass();
                if (obj.Name != null)
                    jsonObject["name"] = new JSONData(obj.Name);
                jsonObject["age"] = new JSONData(obj.Age);
                if (obj.Country != null)
                    jsonObject["country"] = new JSONData(obj.Country);
                jsonObject["isHuman"] = new JSONData(obj.IsHuman);
                if (obj.MyGlossary != null)
                    jsonObject["myGlossary"] = Generated.Glossary.SimpleJsonFactory.ToJsonObject(obj.MyGlossary);
                jsonObject["gender"] = new JSONData((int)obj.Gender);
                if(obj.Family != null)
                {
                    var family = new JSONArray();
                    foreach(var item in obj.Family)
                    {
                        family.Add(ToJsonObject(item));
                    }
                    jsonObject["family"] = family;
                }
                return jsonObject;
            }

            public static Person FromJson(string jsonString)
            {
                var jsonObject = JSON.Parse(jsonString);
                return FromJsonObject(jsonObject);
            }

            public static List<Person> FromJsonArray(string jsonArrayString)
            {
                var jsonArray = JSON.Parse(jsonArrayString);
                var result = new List<Person>();
                foreach (JSONNode jsonObject in jsonArray.AsArray)
                {
                    result.Add(FromJsonObject(jsonObject));
                }
                return result;
            }

            public static Person FromJsonObject(JSONNode jsonObject)
            {
                var name = jsonObject["name"].Value ?? "";
                var age = jsonObject["age"].AsInt;
                var country = jsonObject["country"].Value ?? "";
                var isHuman = jsonObject["isHuman"].AsBool;
                var myGlossary = jsonObject["myGlossary"] != null ? Generated.Glossary.SimpleJsonFactory.FromJsonObject(jsonObject["myGlossary"]) : null;
                var gender = (Gender)jsonObject["gender"].AsInt;
                var family = new List<Person>();
                foreach(JSONNode item in jsonObject["family"].AsArray)
                {
                    family.Add(FromJsonObject(item));
                }

                return new Person
                {
                    Name = name,
                    Age = age,
                    Country = country,
                    IsHuman = isHuman,
                    MyGlossary = myGlossary,
                    Gender = gender,
                    Family = family,
                };
            }

        }
    }
}
