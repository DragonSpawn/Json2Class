using System.Collections.Generic;
using SimpleJSON;
using System.Collections.Generic;

/////////////////////////////////////////////////////////////////////////////////////
/* This file is generated by Json2Class (https://github.com/DragonSpawn/Json2Class)*/
/* Modifications to this file will be lost the next time you run the tool.         */
/*                                                                                 */
/////////////////////////////////////////////////////////////////////////////////////

namespace Generated
{
    public class GlossDef
    {
        public GlossDef()
        {
            Para = string.Empty;
            GlossSeeAlso = new List<string>();
        }

        public string Para {get; set;}
        public List<string> GlossSeeAlso {get; set;}

        public static class SimpleJsonFactory
        {
            public static string ToJson(GlossDef obj)
            {
                var jsonObject = ToJsonObject(obj);
                return jsonObject.ToString();
            }

            public static JSONNode ToJsonObject(GlossDef obj)
            {
                var jsonObject = new JSONClass();
                if (obj.Para != null)
                    jsonObject["para"] = new JSONData(obj.Para);
                if(obj.GlossSeeAlso != null)
                {
                    var glossSeeAlso = new JSONArray();
                    foreach(var item in obj.GlossSeeAlso)
                    {
                        glossSeeAlso.Add(new JSONData(item));
                    }
                    jsonObject["glossSeeAlso"] = glossSeeAlso;
                }
                return jsonObject;
            }

            public static GlossDef FromJson(string jsonString)
            {
                var jsonObject = JSON.Parse(jsonString);
                return FromJsonObject(jsonObject);
            }

            public static GlossDef FromJsonObject(JSONNode jsonObject)
            {
                var para = jsonObject["para"].Value ?? "";
                var glossSeeAlso = new List<string>();
                foreach(JSONNode item in jsonObject["glossSeeAlso"].AsArray)
                {
                    glossSeeAlso.Add(item);
                }

                return new GlossDef
                {
                    Para = para,
                    GlossSeeAlso = glossSeeAlso,
                };
            }

        }

        public static class FastJSONFactory
        {
            public static string ToJson(GlossDef obj)
            {
                var jsonObject = ToJsonObject(obj);
                return fastJSON.JSON.ToJSON(jsonObject);
            }

            public static Dictionary<string, object> ToJsonObject(GlossDef obj)
            {
                var jsonObject = new Dictionary<string, object>();
                if (obj.Para != null)
                    jsonObject["para"] = obj.Para;
                if(obj.GlossSeeAlso != null)
                {
                    var glossSeeAlso = new List<string>();
                    foreach(var item in obj.GlossSeeAlso)
                    {
                        glossSeeAlso.Add(item);
                    }
                    jsonObject["glossSeeAlso"] = glossSeeAlso;
                }
                return jsonObject;
            }

            public static GlossDef FromJson(string jsonString)
            {
                var jsonObject = (Dictionary<string, object>)fastJSON.JSON.Parse(jsonString);
                return FromJsonObject(jsonObject);
            }

            public static GlossDef FromJsonObject(Dictionary<string, object> jsonObject)
            {
                var para = jsonObject.ContainsKey("para") ? jsonObject["para"] as string : "";
                var glossSeeAlso = new List<string>();
                if(jsonObject.ContainsKey("glossSeeAlso"))
                {
                    foreach(string item in jsonObject["glossSeeAlso"] as List<object>)
                    {
                        glossSeeAlso.Add(item);
                    }
                }

                return new GlossDef
                {
                    Para = para,
                    GlossSeeAlso = glossSeeAlso,
                };
            }

        }
    }
}
