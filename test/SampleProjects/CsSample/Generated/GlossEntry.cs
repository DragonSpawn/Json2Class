using SimpleJSON;

/////////////////////////////////////////////////////////////////////////////////////
/* This file is generated by Json2Class (https://github.com/DragonSpawn/Json2Class)*/
/* Modifications to this file will be lost the next time you run the tool.         */
/*                                                                                 */
/////////////////////////////////////////////////////////////////////////////////////

namespace Generated
{
    public class GlossEntry
    {
        public GlossEntry()
        {
            SortAs = string.Empty;
            GlossTerm = string.Empty;
            Acronym = string.Empty;
            Abbrev = string.Empty;
            GlossSee = string.Empty;
        }

        public long Id {get; set;}
        public float TestFloat {get; set;}
        public string SortAs {get; set;}
        public string GlossTerm {get; set;}
        public string Acronym {get; set;}
        public string Abbrev {get; set;}
        public GlossDef GlossDef {get; set;}
        public string GlossSee {get; set;}

        public static class SimpleJsonFactory
        {
            public static string ToJson(GlossEntry obj)
            {
                var jsonObject = ToJsonObject(obj);
                return jsonObject.ToString();
            }

            public static JSONNode ToJsonObject(GlossEntry obj)
            {
                var jsonObject = new JSONClass();
                jsonObject["id"] = new JSONData(obj.Id);
                jsonObject["testFloat"] = new JSONData(obj.TestFloat);
                if (obj.SortAs != null)
                    jsonObject["sortAs"] = new JSONData(obj.SortAs);
                if (obj.GlossTerm != null)
                    jsonObject["glossTerm"] = new JSONData(obj.GlossTerm);
                if (obj.Acronym != null)
                    jsonObject["acronym"] = new JSONData(obj.Acronym);
                if (obj.Abbrev != null)
                    jsonObject["abbrev"] = new JSONData(obj.Abbrev);
                if (obj.GlossDef != null)
                    jsonObject["glossDef"] = Generated.GlossDef.SimpleJsonFactory.ToJsonObject(obj.GlossDef);
                if (obj.GlossSee != null)
                    jsonObject["glossSee"] = new JSONData(obj.GlossSee);
                return jsonObject;
            }

            public static GlossEntry FromJson(string jsonString)
            {
                var jsonObject = JSON.Parse(jsonString);
                return FromJsonObject(jsonObject);
            }

            public static GlossEntry FromJsonObject(JSONNode jsonObject)
            {
                var id = jsonObject["id"].AsInt;
                var testFloat = jsonObject["testFloat"].AsFloat;
                var sortAs = jsonObject["sortAs"].Value ?? "";
                var glossTerm = jsonObject["glossTerm"].Value ?? "";
                var acronym = jsonObject["acronym"].Value ?? "";
                var abbrev = jsonObject["abbrev"].Value ?? "";
                var glossDef = jsonObject["glossDef"] != null ? Generated.GlossDef.SimpleJsonFactory.FromJsonObject(jsonObject["glossDef"]) : null;
                var glossSee = jsonObject["glossSee"].Value ?? "";
                return new GlossEntry
                {
                    Id = id,
                    TestFloat = testFloat,
                    SortAs = sortAs,
                    GlossTerm = glossTerm,
                    Acronym = acronym,
                    Abbrev = abbrev,
                    GlossDef = glossDef,
                    GlossSee = glossSee,
                };
            }

        }
    }
}
