package Generated;

import org.json.simple.JSONObject;
import org.json.simple.JSONValue;
import java.util.List;
import java.util.ArrayList;
import org.json.simple.JSONArray;
/***********************************************************************************/
/* This file is generated by Json2Class (https://github.com/DragonSpawn/Json2Class)*/
/* Modifications to this file will be lost the next time you run the tool.         */
/* Date: 2015-03-08                                                                */
/***********************************************************************************/

public class GlossDef{
    public GlossDef() {
        para = "";
        glossSeeAlso = new ArrayList<String>();
    }
    public String para;
    public List<String> glossSeeAlso;

    public static class JsonSimpleFactory
    {
        public static String toJson(GlossDef obj) {
            JSONObject json = toJsonObject(obj);
            return json.toString();
        }

        public static String toJson(List<GlossDef> list) {
            JSONArray array = new JSONArray();
            for(GlossDef obj : list)
            {
                array.add(toJsonObject(obj));
            }
            return array.toString();
        }

        public static JSONObject toJsonObject(GlossDef obj) {
            JSONObject json = new JSONObject();
            JSONArray tempArray;
            json.put("para", obj.para);

            if(obj.glossSeeAlso != null) {
                tempArray = new JSONArray();
                for(String item : obj.glossSeeAlso){
                    tempArray.add(item);
                }
                json.put("glossSeeAlso", tempArray);
            }
            return json;
        }
        public static GlossDef fromJson(String jsonString) {
            JSONObject jsonObject = (JSONObject)JSONValue.parse(jsonString);
            return fromJsonObject(jsonObject);
        }

        public static List<GlossDef> fromJsonArray(String jsonArrayString) {
            JSONArray jsonArray = (JSONArray)JSONValue.parse(jsonArrayString);
            List<GlossDef> result = new ArrayList<GlossDef>();
            for(Object jsonObject : jsonArray)
            {
                result.add(fromJsonObject((JSONObject)jsonObject));
            }
            return result;
        }

        public static GlossDef fromJsonObject(JSONObject jsonObject) {
            if(jsonObject == null) {
                return null;
            }
            GlossDef obj = new GlossDef();
            if(jsonObject.containsKey("para")) {
                obj.para = (String)jsonObject.get("para");
            }
            if(jsonObject.containsKey("glossSeeAlso")) {
                obj.glossSeeAlso = new ArrayList<String>();
                for(Object item : (JSONArray)jsonObject.get("glossSeeAlso")) {
                    obj.glossSeeAlso.add((String)item);
                }
            }
            return obj;
        }
    }
}
