import json
from glossdef import GlossDef
#####################################################################################
# This file is generated by Json2Class (https://github.com/DragonSpawn/Json2Class)  #
# Modifications to this file will be lost the next time you run the tool.           #
#                                                                                   #
#####################################################################################


class GlossEntry(object):
    def __init__(self):
        self._id = 0
        self._test_float = 0.0
        self._sort_as = ""
        self._gloss_term = ""
        self._acronym = ""
        self._abbrev = ""
        self._gloss_def = None
        self._gloss_see = ""

    @property
    def id(self):
        """:rtype: int"""
        return self._id

    @id.setter
    def id(self, value):
        """:type value: int
           :rtype: None"""
        self._id = value

    @property
    def test_float(self):
        """:rtype: float"""
        return self._test_float

    @test_float.setter
    def test_float(self, value):
        """:type value: float
           :rtype: None"""
        self._test_float = value

    @property
    def sort_as(self):
        """:rtype: str"""
        return self._sort_as

    @sort_as.setter
    def sort_as(self, value):
        """:type value: str
           :rtype: None"""
        self._sort_as = value

    @property
    def gloss_term(self):
        """:rtype: str"""
        return self._gloss_term

    @gloss_term.setter
    def gloss_term(self, value):
        """:type value: str
           :rtype: None"""
        self._gloss_term = value

    @property
    def acronym(self):
        """:rtype: str"""
        return self._acronym

    @acronym.setter
    def acronym(self, value):
        """:type value: str
           :rtype: None"""
        self._acronym = value

    @property
    def abbrev(self):
        """:rtype: str"""
        return self._abbrev

    @abbrev.setter
    def abbrev(self, value):
        """:type value: str
           :rtype: None"""
        self._abbrev = value

    @property
    def gloss_def(self):
        """:rtype: GlossDef"""
        return self._gloss_def

    @gloss_def.setter
    def gloss_def(self, value):
        """:type value: GlossDef
           :rtype: None"""
        self._gloss_def = value

    @property
    def gloss_see(self):
        """:rtype: str"""
        return self._gloss_see

    @gloss_see.setter
    def gloss_see(self, value):
        """:type value: str
           :rtype: None"""
        self._gloss_see = value

    class JsonFactory():
        def __init__(self):
            pass

        @staticmethod
        def to_json(obj):
            """
            Takes an GlossEntry or a list of GlossEntry and returns a json string representation of it
            :rtype: str
            """
            return GlossEntry.JsonFactory.JsonEncoder().encode(obj)

        class JsonEncoder(json.JSONEncoder):
            def default(self, obj):
                if obj is None:
                    return None
                d = {
                    'id': obj.id,
                    'testFloat': obj.test_float,
                    'sortAs': obj.sort_as,
                    'glossTerm': obj.gloss_term,
                    'acronym': obj.acronym,
                    'abbrev': obj.abbrev,
                    'glossDef': GlossDef.JsonFactory.JsonEncoder().default(obj.gloss_def),
                    'glossSee': obj.gloss_see,
                }
                return d

        @staticmethod
        def from_json_array(json_array):
            """
            :type json_array: list
            :rtype: list of [GlossEntry]
            """
            result = []
            for obj in json_array:
                result.append(GlossEntry.JsonFactory.from_json(obj))
            return result

        @staticmethod
        def from_json(json_obj):
            """:type json_obj: dict
               :rtype: GlossEntry"""
            if json_obj is None:
                return None
            obj = GlossEntry()

            if "id" in json_obj:
                obj._id = json_obj["id"]
            if "testFloat" in json_obj:
                obj._test_float = json_obj["testFloat"]
            if "sortAs" in json_obj:
                obj._sort_as = json_obj["sortAs"]
            if "glossTerm" in json_obj:
                obj._gloss_term = json_obj["glossTerm"]
            if "acronym" in json_obj:
                obj._acronym = json_obj["acronym"]
            if "abbrev" in json_obj:
                obj._abbrev = json_obj["abbrev"]
            if "glossDef" in json_obj:
                obj._gloss_def = GlossDef.JsonFactory.from_json(json_obj["glossDef"])
            if "glossSee" in json_obj:
                obj._gloss_see = json_obj["glossSee"]
            return obj

