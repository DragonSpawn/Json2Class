import datetime
from convert.base.generator import BaseGenerator
from convert.base.parsedobject import ParsedObjectType


class Generator(BaseGenerator):
    def _generate_default_constructor(self):
        constructor = "    public {0}() {{\n".format(_capitalize(self.data.name))

        for member in self.data.data:
            if member.type == ParsedObjectType.Array:
                constructor += "        {0} = new ArrayList<{1}>();\n".format(member.name, _get_type_name(member.data[0], False))
            elif member.type == ParsedObjectType.String:
                constructor += "        {0} = \"\";\n".format(member.name)

        constructor += "    }\n"
        return constructor

    def _generate_footer(self):
        return "}\n"

    def _generate_member_access(self):
        properties = ""
        for member in self.data.data:
            properties += _member_declaration(member)
        return properties

    def file_name(self, name):
        return name[0].upper() + name[1:] + ".java"

    def _generate_json_constructor(self):
        constructor = "    public {0}(JSONObject jsonObject) {{\n".format(_capitalize(self.data.name))

        # member initialization
        for member in self.data.data:
            constructor += _member_initialization(member)

        constructor += "    }\n\n"
        return constructor

    def _generate_factory(self):
        serializer = ("\n    public JSONObject toJson() {\n"
                      "        JSONObject json = new JSONObject();\n")

        for member in self.data.data:
            if member.type == ParsedObjectType.Array:
                serializer += "        JSONArray tempArray;\n"
                break

        for member in self.data.data:
            if member.type == ParsedObjectType.Object:
                serializer += _serialize_object_member(member)
            elif member.type == ParsedObjectType.Array:
                serializer += _serialize_array_member(member)
            else:
                serializer += "        json.put(\"{0}\", {1});\n".format(member.name, member.name)

        serializer += ("        return json;\n"
                       "    }\n")

        return serializer

    def _generate_header(self):
        result = ("package {0};\n\n"
                  "import org.json.simple.JSONObject;\n").format(self.namespace)

        for member in self.data.data:
            if member.type == ParsedObjectType.Array:
                result += ("import java.util.List;\n"
                           "import java.util.ArrayList;\n"
                           "import org.json.simple.JSONArray;\n")
                break
        date_str = "Date: {0}".format(datetime.date.today())
        date_str = date_str.ljust(80)
        result += ("/***********************************************************************************/\n"
                   "/* This file is generated by Json2Class (https://github.com/DragonSpawn/Json2Class)*/\n"
                   "/* Modifications to this file will be lost the next time you run the tool.         */\n"
                   "/* {2}*/\n"
                   "/***********************************************************************************/\n\n"
                   "public class {1}{{\n").format(self.namespace, _capitalize(self.data.name), date_str)
        return result


def _member_declaration(member):
    return "    public {0} {1};\n".format(_get_type_name(member), member.name)


def _get_member_initialization_string(member, json_container):
    if member.type == ParsedObjectType.Object:
        return "new {0}((JSONObject){1})".format(_capitalize(member.name), json_container)
    if member.type == ParsedObjectType.Array:
        return "new {0}".format( _get_type_name(member))
    return "{0}{1}".format(json_container, "")


def _serialize_object_member(member):
    return "        json.put(\"{0}\", {1}.toJson());\n".format(member.name, member.name)


def _serialize_array_member(member):
    serializer = ("\n        tempArray = new JSONArray();\n"
                  "        for({1} item : {0}){{\n").format(member.name, _get_type_name(member.data[0], False))
    if member.data[0].type == ParsedObjectType.Object:
        serializer += "            tempArray.add(item.toJson());\n"
    else:
        serializer += "            tempArray.add(item);\n"
    serializer += "        }\n"
    serializer += "        json.put(\"{0}\", tempArray);\n".format(member.name)
    return serializer


def _capitalize(obj):
    """
    Returns the object name with the first letter capitalized (all other untouched).
    :param obj:
    :return:
    """
    if obj.__len__() < 2:
        return obj
    if obj == "string" or obj == "float" or obj == "int":
        return obj
    return obj[0].upper() + obj[1:]


def _member_initialization(member):
    """
    Generated the code for initialization of the members in the constructor.
    :type member: ParsedMember
    :param member:
    :return:
    """
    json_container_string = "jsonObject.get(\"{0}\")".format(member.name)

    if member.type == ParsedObjectType.Object:
        return "        {0} = {1};\n".format(member.name, _get_member_initialization_string(member, json_container_string))
    elif member.type == ParsedObjectType.Array:
        result = ("        {0} = new ArrayList<{1}>();\n"
                  "        for(Object item : (JSONArray)jsonObject.get(\"{2}\")) {{\n").format(member.name, _get_type_name(member.data[0], False), member.name)
        child = member.data[0]

        if child.type == ParsedObjectType.Object:
            result += "            {0}.add({1});\n".format(member.name, _get_member_initialization_string(child, "item"))
        else:
            result += "            {0}.add(({1})item);\n".format(member.name, _get_type_name(child, False))
        result += "        }\n"
        return result
    else:
        return "        {0} = ({2}){1};\n".format(member.name, _get_member_initialization_string(member, json_container_string), _get_type_name(member, False))


def _get_type_name(member, primitive=True):
    """
    If a ParsedClass is supplied then it returns the object name with a captialized first letter (myClass => MyClass)
    For ParsedMember it returns the type of the member (myString => string)
    :type member: ParsedMember
    :param obj:
    :return:
    """
    if member.type == ParsedObjectType.String:
        return "String"
    if member.type == ParsedObjectType.Int or member.type == ParsedObjectType.Float:
        if not primitive:
            if member.type == ParsedObjectType.Int:
                return "Integer"
            else:
                return "Float"
        return member.type.name.lower()
    if member.type == ParsedObjectType.Array:
        return "List<{0}>".format(_get_type_name(member.data[0], False))
    return _capitalize(member.name)